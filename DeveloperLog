Project: P1 – WhatsApp Commerce Concierge
Author: AMM
Log Purpose: Running timeline and decisions for smooth handover.

== 0001: Catalog Review ==
- Read gcc_mena_portfolio_catalog.html and extracted P1 scope, stack, NFRs, APIs, milestones, KPIs, risks.
- Key endpoints: /webhook/whatsapp, /cart/*, /checkout, /orders/{id}, /returns.
- Stack: NestJS API, Next.js Web, PostgreSQL, Redis, BullMQ; Dockerized; Jest/Playwright; WhatsApp Cloud API; Stripe (test) + COD.

== 0002: Sprint 0 Plan ==
- Goals: CI/CD, Docker, API/Web skeletons, env templates, seeds, free hosted demo targets.
- Hosting targets (free tiers): Render (API), Vercel (Web), Neon (Postgres), Upstash (Redis).
- Design kit: shadcn/ui + Tailwind + Radix + lucide; RTL support.

== 0003: Scaffolding Decisions ==
- Monorepo: pnpm workspace with packages/api (NestJS) and packages/web (Next.js 14 App Router).
- ORM: Placeholder wiring to Postgres; choose TypeORM/Prisma later (kept neutral in code to unblock wiring).
- CI/CD: GitHub Actions for lint/test/build; deploy webhook call to Render; Vercel auto-deploy via GitHub.
- Observability: Sentry placeholders; OpenAPI enabled on API; health checks in both apps.
- Authoring: All packages set author to AMM.

== 0004: Next Actions ==
- Add real DB models and migrations; wire Redis/BullMQ.
- Connect Meta WhatsApp sandbox (verify token) and Stripe test webhooks.
- Provision free-tier services; add env vars to GitHub/hosting.
- E2E tests for browse→cart→checkout; Arabic RTL verification.

== 0005: Handoff Notes ==
- After cloning: see docs/sprint-0-runbook.md for setup steps.
- Env samples in packages/*/.env.example.
- CI will run on PRs; pushing to main triggers deploys (Render hook + Vercel Git integration).

== 0006: Scaffolding Completed (Sprint 0) ==
- Monorepo initialized (pnpm workspace). Root authored by AMM.
- API (NestJS) with /healthz, /webhook/whatsapp (GET verify + POST ack), /payments/stripe/webhook stubs.
- Web (Next.js 14) minimal app with Tailwind baseline; RTL kit to be added next.
- Dockerfiles for api/web; docker-compose with Postgres/Redis.
- CI (GitHub Actions) for build/test/lint; Deploy workflow to trigger Render via secret hook.
- Docs: README, sprint-0-runbook, infra readme; seed SQL placeholder.

== 0007: Repo & Structure ==
- Moved project into folder: whatsapp-commerce-concierge
- Initialized Git repository (main branch) at D:/Projects/whatsapp-commerce-concierge
- Next step: set git user/email locally, make initial commit, add GitHub remote, push.

== 0008: Process Enforcement ==
- Added `.github/pull_request_template.md` with a checklist item to update DeveloperLog.
- Added CI workflow `.github/workflows/verify-developerlog.yml` to fail PRs that change core paths without updating DeveloperLog.

== 0009: Vercel Serverless Setup (No Docker) ==
- API: Added Vercel serverless adapter using `@vendia/serverless-express`.
  - New handler: `packages/api/api/[[...slug]].ts` (catch-all) bootstraps Nest once and reuses cached handler.
  - Refactored `packages/api/src/main.ts` to export `createApp()` for serverless usage while preserving local bootstrap.
  - Added dependency `@vendia/serverless-express` in `packages/api/package.json`.
- Web: Added optional rewrite in `packages/web/next.config.js` to proxy `/api/*` to `NEXT_PUBLIC_API_URL` if set.
- Deploy plan: Use two Vercel projects with root directories `packages/api` and `packages/web`.

== 0010: Vercel Build Fixes ==
- API build on Vercel failed due to missing `express` types at compile time.
- Added runtime dep `express` and dev dep `@types/express` in `packages/api/package.json`.

== 0011: Vercel Routing/Config Fix ==
- Added `packages/api/vercel.json` with stable builder syntax using `@vercel/node` and a catch-all route mapping; avoids runtime/version errors.
- Guidance: In Vercel API project, clear Output Directory (leave blank) and set Framework to Other/Node.js; no static output required.

== 0012: CI pnpm Version Conflict ==
- Resolved GitHub Actions error by removing explicit pnpm `version` from `pnpm/action-setup` and relying on `packageManager` in root `package.json` via Corepack.

== 0013: Vercel/@vercel-node Types + Deploy Workflow Fix ==
- Removed `@vercel/node` type import from `packages/api/api/[[...slug]].ts` to avoid TS2307 during Vercel build; used `any` for handler args.
- Updated `.github/workflows/deploy.yml` to avoid using `secrets` in an `if:` expression; instead guard inside the shell script.
- Serverless crash fix: ensured `createApp()` calls `await app.init()` so Nest initializes in serverless context before handing Express app to the serverless adapter.

== 0014: ESM Import Resolution on Vercel ==
- Fixed module resolution error by changing serverless handler import to explicit ESM extension: `import { createApp } from '../src/main.js'` in `packages/api/api/[[...slug]].ts`.

== 0015: Validation Dependencies ==
- Vercel crash due to missing `class-validator` when using `ValidationPipe`.
- Added `class-validator` and `class-transformer` to `packages/api/package.json` dependencies.
