Project: P1 â€“ WhatsApp Commerce Concierge
Author: AMM
Log Purpose: Running timeline and decisions for smooth handover.

== 0001: Catalog Review ==
- Read gcc_mena_portfolio_catalog.html and extracted P1 scope, stack, NFRs, APIs, milestones, KPIs, risks.
- Key endpoints: /webhook/whatsapp, /cart/*, /checkout, /orders/{id}, /returns.
- Stack: NestJS API, Next.js Web, PostgreSQL, Redis, BullMQ; Dockerized; Jest/Playwright; WhatsApp Cloud API; Stripe (test) + COD.

== 0002: Sprint 0 Plan ==
- Goals: CI/CD, Docker, API/Web skeletons, env templates, seeds, free hosted demo targets.
- Hosting targets (free tiers): Render (API), Vercel (Web), Neon (Postgres), Upstash (Redis).
- Design kit: shadcn/ui + Tailwind + Radix + lucide; RTL support.

== 0003: Scaffolding Decisions ==
- Monorepo: pnpm workspace with packages/api (NestJS) and packages/web (Next.js 14 App Router).
- ORM: Placeholder wiring to Postgres; choose TypeORM/Prisma later (kept neutral in code to unblock wiring).
- CI/CD: GitHub Actions for lint/test/build; deploy webhook call to Render; Vercel auto-deploy via GitHub.
- Observability: Sentry placeholders; OpenAPI enabled on API; health checks in both apps.
- Authoring: All packages set author to AMM.

== 0004: Next Actions ==
- Add real DB models and migrations; wire Redis/BullMQ.
- Connect Meta WhatsApp sandbox (verify token) and Stripe test webhooks.
- Provision free-tier services; add env vars to GitHub/hosting.
- E2E tests for browseâ†’cartâ†’checkout; Arabic RTL verification.

== 0005: Handoff Notes ==
- After cloning: see docs/sprint-0-runbook.md for setup steps.
- Env samples in packages/*/.env.example.
- CI will run on PRs; pushing to main triggers deploys (Render hook + Vercel Git integration).

== 0006: Scaffolding Completed (Sprint 0) ==
- Monorepo initialized (pnpm workspace). Root authored by AMM.
- API (NestJS) with /healthz, /webhook/whatsapp (GET verify + POST ack), /payments/stripe/webhook stubs.
- Web (Next.js 14) minimal app with Tailwind baseline; RTL kit to be added next.
- Dockerfiles for api/web; docker-compose with Postgres/Redis.
- CI (GitHub Actions) for build/test/lint; Deploy workflow to trigger Render via secret hook.
- Docs: README, sprint-0-runbook, infra readme; seed SQL placeholder.

== 0007: Repo & Structure ==
- Moved project into folder: whatsapp-commerce-concierge
- Initialized Git repository (main branch) at D:/Projects/whatsapp-commerce-concierge
- Next step: set git user/email locally, make initial commit, add GitHub remote, push.

== 0008: Process Enforcement ==
- Added `.github/pull_request_template.md` with a checklist item to update DeveloperLog.
- Added CI workflow `.github/workflows/verify-developerlog.yml` to fail PRs that change core paths without updating DeveloperLog.

== 0009: Vercel Serverless Setup (No Docker) ==
- API: Added Vercel serverless adapter using `@vendia/serverless-express`.
  - New handler: `packages/api/api/[[...slug]].ts` (catch-all) bootstraps Nest once and reuses cached handler.
  - Refactored `packages/api/src/main.ts` to export `createApp()` for serverless usage while preserving local bootstrap.
  - Added dependency `@vendia/serverless-express` in `packages/api/package.json`.
- Web: Added optional rewrite in `packages/web/next.config.js` to proxy `/api/*` to `NEXT_PUBLIC_API_URL` if set.
- Deploy plan: Use two Vercel projects with root directories `packages/api` and `packages/web`.

== 0010: Vercel Build Fixes ==
- API build on Vercel failed due to missing `express` types at compile time.
- Added runtime dep `express` and dev dep `@types/express` in `packages/api/package.json`.

== 0011: Vercel Routing/Config Fix ==
- Added `packages/api/vercel.json` with stable builder syntax using `@vercel/node` and a catch-all route mapping; avoids runtime/version errors.
- Guidance: In Vercel API project, clear Output Directory (leave blank) and set Framework to Other/Node.js; no static output required.

== 0012: CI pnpm Version Conflict ==
- Resolved GitHub Actions error by removing explicit pnpm `version` from `pnpm/action-setup` and relying on `packageManager` in root `package.json` via Corepack.

== 0013: Vercel/@vercel-node Types + Deploy Workflow Fix ==
- Removed `@vercel/node` type import from `packages/api/api/[[...slug]].ts` to avoid TS2307 during Vercel build; used `any` for handler args.
- Updated `.github/workflows/deploy.yml` to avoid using `secrets` in an `if:` expression; instead guard inside the shell script.
- Serverless crash fix: ensured `createApp()` calls `await app.init()` so Nest initializes in serverless context before handing Express app to the serverless adapter.

== 0014: ESM Import Resolution on Vercel ==
- Fixed module resolution error by changing serverless handler import to explicit ESM extension: `import { createApp } from '../src/main.js'` in `packages/api/api/[[...slug]].ts`.

== 0015: Validation Dependencies ==
- Vercel crash due to missing `class-validator` when using `ValidationPipe`.
- Added `class-validator` and `class-transformer` to `packages/api/package.json` dependencies.

== 0016: Vercel Adapter Adjustment ==
- Replaced `@vendia/serverless-express` usage with direct Express handler in `packages/api/api/[[...slug]].ts`.
- Reason: Vercel Node functions provide Node req/res, and serverless-express expected AWS event shape, causing "Unable to determine event source" errors.

== 0017: Vercel Deployments (API + Web) ==
- API deployed to Vercel (serverless Node function).
  - Verified `GET /healthz` returns 200 JSON.
  - Key fixes: ESM import extension (`main.js`), `await app.init()` for serverless, add `class-validator`/`class-transformer`, remove AWS-style adapter in favor of direct Express handler, add `packages/api/vercel.json` with `@vercel/node` build + catch-all route.
- Web deployed to Vercel (Next.js, Root: `packages/web`).
  - Env: set `NEXT_PUBLIC_API_URL` to the API URL.
  - Rewrite in `packages/web/next.config.js` proxies `/api/*` to API; verified `/api/healthz` works.
- CI/CD hygiene:
  - pnpm version conflict resolved in `ci.yml` (rely on root `packageManager`).
  - Render deploy workflow guarded without using `secrets` in `if:`.
  - DeveloperLog PR check in place.

== 0018: Next Steps / Parking Lot ==
- Tighten CORS: restrict to web domain(s) instead of `origin: true`.
- WhatsApp: set `WHATSAPP_*` envs on API; verify webhook in Meta console.
- Stripe: set `STRIPE_SECRET_KEY`/`STRIPE_WEBHOOK_SECRET`; send test event to `/payments/stripe/webhook`.
- DB/Cache: provision Neon & Upstash; update `DATABASE_URL`/`REDIS_URL` on Vercel; add simple health endpoints.
- ORM & Migrations: choose Prisma or TypeORM; add models and migration workflow.
- Observability: add `SENTRY_DSN`; wire error reporting (optional).
- E2E: add Playwright smoke tests for browseâ†’cartâ†’checkout; RTL checks.
- Cleanup: remove `@vendia/serverless-express` from API deps (no longer used) and refresh lockfile.

== 0019: MVP Sprint Plan (P1 WhatsApp Commerce Concierge) ==
- Cadence: 2-week sprints, 6 sprints total (12 weeks).
- Team: PM, Tech Lead (Node), 1 FE, 1 BE, 1 QA, 0.5 DevOps.
- Environments: Local (Docker Compose), Staging (Vercel API/Web, Neon, Upstash), Pilot.
- KPIs (tracked from Sprint 2): Conversion rate, AOV, chat funnel drop-off, first-reply time.
- NFRs: PDPL consent, PCI-aware (via gateway), 99.9% SLA, P95 API < 300ms.
- Risks: WA onboarding delays ? sandbox first; Payments risk ? start COD + one provider; Infra quotas on free tiers.

Sprint 1 (Weeks 1–2): WA Webhook, Core Dialog, Foundations
Goals
- Stabilize WhatsApp webhook verify/ingest; lay base conversation loop.
- Stand up DB (Neon) + Redis (Upstash) + BullMQ wiring; choose ORM and migrations.
- PDPL consent capture + audit trail; baseline observability.
Deliverables
- API: /webhook/whatsapp (verify + message ingest), /healthz improved.
- Data: Conversation, Customer models; migration pipeline; seeds.
- Infra: Redis/BullMQ configured; rate limiting; CORS tightened.
- Observability: request logging, trace IDs, error reporting, basic dashboards.
QA/Perf
- Unit tests for webhook verification; load test 50 RPS P95 < 200ms.
- Security review of token handling and consent storage.
Risks/Mitigations
- WA sandbox only ? simulate inbound events via fixtures; decouple from Meta uptime.

Sprint 2 (Weeks 3–4): Catalog Sync + Browse
Goals
- Implement catalog ingestion and search; enable conversational browse in WA.
Deliverables
- API: /catalog sync job (from demo feed), /products query.
- Data: Product model (SKU, price, stock, media), category facets.
- WA flows: intents for categories, product details, quick replies (Arabic/English).
- Web: Minimal product detail preview for internal QA; RTL baseline.
QA/Perf
- Playwright smoke for browse intents; stock/price consistency checks.
- P95 product lookup < 150ms (cached), warm Redis keys.
Risks/Mitigations
- Catalog source instability ? file-based seed fallback and nightly sync.

Sprint 3 (Weeks 5–6): Conversational Cart
Goals
- Add cart creation/persistence and line-item ops via chat.
Deliverables
- API: /cart/* (create, add, update, remove, view), idempotency keys.
- Data: Cart, CartItem linked to Conversation/Customer.
- WA flows: add to cart, view cart, update qty, remove, shipping estimate stub.
- Pricing: tax/shipping placeholders; currency handling.
QA/Perf
- Unit/E2E for cart ops; concurrency tests; message templates localized.
- P95 cart ops < 200ms; Redis caching for catalog calls.
Risks/Mitigations
- Session confusion across devices ? bind cart to WA sender ID + TTL.

Sprint 4 (Weeks 7–8): Checkout (COD + Stripe)
Goals
- Implement checkout with COD baseline and Stripe card in test.
Deliverables
- API: /checkout (init, confirm), payments abstraction; /payments/stripe/webhook hardened.
- Data: Order, Payment models; idempotent order creation; address capture flow.
- WA flows: address/notes collection, payment handoff link for Stripe, COD confirmation.
- Compliance: PCI-aware (redirect to provider), PDPL consent replay on checkout.
QA/Perf
- E2E: browse ? cart ? checkout (COD and Stripe test); retry-safe payments.
- P95 checkout init < 250ms (excluding provider redirect).
Risks/Mitigations
- Payment failures ? optimistic order reserve + state machine retries.

Sprint 5 (Weeks 9–10): Orders, Tracking, Returns, Basic CMS
Goals
- Expose order status, returns ticketing, and operator content controls.
Deliverables
- API: /orders/{id}, /orders (lookup by phone), /returns (create, status).
- Data: Return model; status events; SLA timers; basic CMS for quick replies/templates.
- WA flows: order status, start return, RMA guidance, human handoff keyword.
- Web: Minimal order lookup page (phone + order ID) for support.
QA/Perf
- Playwright E2E for order status and returns; Arabic RTL content review.
- Ops runbooks and on-call alerts for failed jobs/webhooks.
Risks/Mitigations
- Abuse on returns ? simple rules (time window, item condition prompts).

Sprint 6 (Weeks 11–12): Hardening, UAT, Pilot Go-Live
Goals
- Close NFRs, observability, and readiness; execute UAT and pilot.
Deliverables
- Perf: Load test to projected traffic; tune DB indexes, Redis TTLs.
- Reliability: Circuit breakers, retries/backoff, DLQs for BullMQ; backup/restore drills.
- Security/Compliance: PDPL data export/delete, consent logs, privacy notices; checklist sign-off.
- Ops: Dashboards (SLA, P95, funnel), alerts, runbooks; incident templates.
- Docs: API OpenAPI finalized; support SOP; playbook for WhatsApp number migration.
QA/Acceptance
- UAT checklist pass; rollback tested; pilot launch with monitored feature flags.
Risks/Mitigations
- Provider/regulatory changes ? feature flagging, gateway abstraction for payments.

Cross-Cutting Threads (All Sprints)
- i18n/RTL: Arabic-first content and templates; date/number formats.
- Analytics: Funnel events (view product, add to cart, start checkout, pay), conversion and AOV dashboards.
- Accessibility: Message template readability; web pages WCAG AA where applicable.
- Documentation: Keep docs and DeveloperLog updated per PR.

Backlog (Post-MVP)
- Add Tamara/Tabby/Mada adapters behind payment gateway.
- Product recommendations; upsell flows; inventory webhooks.
- SLA auto-remediation; smarter NLP intents.

== 0020: GitHub Work Items Bootstrap Script ==
- Added `scripts/bootstrap-github-work-items.ps1` to create 6 sprint milestones and issues from `docs/backlog.md` via GitHub REST API.
- Usage: set `GITHUB_TOKEN` (repo scope). Dry run: `pwsh scripts/bootstrap-github-work-items.ps1 -DryRun`. Create with start date: `-StartDate YYYY-MM-DD`.
- Repo detection: infers `owner/repo` from `git remote origin`; override with `-Owner/-Repo`.
- Also added usage block to `docs/backlog.md`.

== 0021: Label Scaffolding & Auto-Triage ==
- Enhanced `scripts/bootstrap-github-work-items.ps1` to auto-create labels and tag issues by keyword rules (area + role labels).
- Labels include: backend, frontend, infra, qa, docs, whatsapp, catalog, cart, checkout, payments, orders, returns, cms, observability, performance, security, i18n.
- Updated docs/backlog.md with a Labels note.

== 0022: Sprint Process - Issues & Milestones ==
- At sprint planning: create/update milestone "Sprint N" dates and generate/update issues from docs/backlog.md using scripts/bootstrap-github-work-items.ps1 (run with -DryRun first).
- During sprint: keep labels current, link PRs to issues, and split blockers into separate issues.
- Sprint review: close done issues, roll spillover to the next sprint milestone, and verify milestone due dates.
- After review: update this DeveloperLog with a brief sprint summary and KPI snapshot (Conversion, AOV, funnel drop-off, first-reply time).
- One-shot command (no policy change needed): powershell -NoProfile -ExecutionPolicy Bypass -File scripts\bootstrap-github-work-items.ps1 -StartDate YYYY-MM-DD
- Auth: set GITHUB_TOKEN (PAT with repo scope) in the environment before running the script.


== 0023: Sprint 1 Kick-off ==
- Added WhatsApp webhook signature verification (X-Hub-Signature-256) with rawBody capture.
- Enhanced /webhook/whatsapp POST to parse message summaries; logs count; returns ack.
- Added request ID middleware + logging interceptor (trace IDs, durations).
- Improved /healthz with uptime and timestamp.
- Chose Prisma; added schema for Customer, Conversation, Consent; prisma scripts.
- Wired Redis/BullMQ skeleton with /queue/health endpoint.
- Tightened CORS via CORS_ORIGINS and added basic rate limiting (Throttler).
- Added unit tests for signature utils (ts-jest).



== 0024: CI DB Deploy ==
- Added GitHub Actions workflow to deploy Prisma migrations on push to main/tags.
- Workflow: .github/workflows/db-deploy.yml uses DATABASE_URL secret; falls back to db push if no migrations.
- Action also generates Prisma Client before deploy.



== 0025: Neon Detailed Guide ==
- Added docs/neon-setup.md with production-first Neon instructions (pooler, roles, Prisma params, CI).
- Linked guide from sprint-0-runbook no-Docker section.



== 0026: CORS 500 Fix ==
- Adjusted CORS origin callback to return false for disallowed origins instead of throwing (prevents 500 on Vercel).
- File: packages/api/src/main.ts; reminder to set CORS_ORIGINS to your web URL(s).



== 0027: WhatsApp Webhook Test Script ==
- Added scripts/test-whatsapp-webhook.ps1 to send signed WhatsApp-style POST using HttpClient (UTF-8, no BOM).
- Parameters: -Url, -Secret, -From, -Text, -MessageId, -BodyPath, -SkipSignature.



== 0028: Queue Health Hardening ==
- /queue/health now returns 503 with a clear message when REDIS_URL is missing and wraps Redis errors.
- Ensured BullMQ queue/Redis connections close cleanly in serverless.
- Files: packages/api/src/queue/queueHealth.controller.ts.

