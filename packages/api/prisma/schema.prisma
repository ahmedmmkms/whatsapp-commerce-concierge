// Prisma schema for WhatsApp Commerce Concierge API (Sprint 1)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // WhatsApp sender identifier (phone number in international format)
  waPhone      String        @db.VarChar(32)
  // Optional display name from WA profile
  waName       String?       @db.VarChar(128)
  // PDPL redaction flags
  isRedacted   Boolean       @default(false)
  redactedAt   DateTime?

  conversations Conversation[]
  consents      Consent[]
  carts         Cart[]
  orders        Order[]

  @@unique([waPhone])
}

model Conversation {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  customerId   String
  customer     Customer   @relation(fields: [customerId], references: [id])

  // Optional: last message metadata
  lastMessageAt DateTime?
  state        String?    @db.VarChar(64)
  carts        Cart[]
  orders      Order[]

  @@unique([customerId])
}

model Consent {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())

  customerId   String
  customer     Customer   @relation(fields: [customerId], references: [id])

  granted      Boolean
  channel      String     @db.VarChar(32) // e.g., 'whatsapp'
  policyText   String?    @db.Text
  policyVersion String?   @db.VarChar(32)
}

// Sprint 2: Catalog models

model Category {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  name      String     @db.VarChar(128)
  slug      String     @unique @db.VarChar(128)

  parentId  String?
  parent    Category?  @relation("CategoryChildren", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryChildren")

  products  Product[]
}

model Product {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  sku         String        @unique @db.VarChar(64)
  name        String        @db.VarChar(256)
  description String?
  price       Int           // minor units (e.g., cents)
  currency    String        @db.VarChar(8)
  stock       Int           @default(0)
  isActive    Boolean       @default(true)

  brand       String?       @db.VarChar(64)
  attributes  Json?

  categoryId  String?
  category    Category?     @relation(fields: [categoryId], references: [id])

  media       ProductMedia[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@index([categoryId])
  @@index([name])
}

model ProductMedia {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product  @relation(fields: [productId], references: [id])

  url       String   @db.Text
  kind      String   @db.VarChar(16) // image|video
  sortOrder Int      @default(0)

  @@index([productId])
}

// Sync status/logs for catalog
model CatalogSyncLog {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  ok           Boolean
  productsUpserted Int
  categoriesUpserted Int
  note         String?  @db.Text
}

// Sprint 3: Cart models

model Cart {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  customerId     String
  customer       Customer      @relation(fields: [customerId], references: [id])

  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id])

  status         String        @default("active") @db.VarChar(16) // active|abandoned|ordered
  currency       String        @db.VarChar(8)
  subtotalMinor  Int           @default(0)
  taxMinor       Int           @default(0)
  shippingMinor  Int           @default(0)
  totalMinor     Int           @default(0)
  version        Int           @default(0)
  expiresAt      DateTime?

  items          CartItem[]
  orders         Order[]

  @@index([customerId, status])
}

model CartItem {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  cartId             String
  cart               Cart     @relation(fields: [cartId], references: [id])

  productId          String
  product            Product  @relation(fields: [productId], references: [id])

  sku                String   @db.VarChar(64)
  nameSnapshot       String   @db.VarChar(256)
  priceSnapshotMinor Int
  currency           String   @db.VarChar(8)
  qty                Int
  lineTotalMinor     Int      @default(0)

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([cartId, sku])
}

// Sprint 5: Checkout/Orders/Payments

model Address {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  name        String?   @db.VarChar(128)
  phone       String?   @db.VarChar(32)
  line1       String    @db.VarChar(256)
  line2       String?   @db.VarChar(256)
  city        String    @db.VarChar(128)
  region      String?   @db.VarChar(128)
  country     String    @db.VarChar(2)
  postalCode  String?   @db.VarChar(32)

  orders      Order[]
}

model Order {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  customerId     String
  customer       Customer     @relation(fields: [customerId], references: [id])

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  cartId         String?
  cart           Cart?        @relation(fields: [cartId], references: [id])

  addressId      String?
  address        Address?     @relation(fields: [addressId], references: [id])

  currency       String       @db.VarChar(8)
  subtotalMinor  Int          @default(0)
  taxMinor       Int          @default(0)
  shippingMinor  Int          @default(0)
  totalMinor     Int          @default(0)

  status         String       @db.VarChar(24) @default("pending") // pending|pending_cod|confirmed|paid|canceled|failed
  paymentState   String?      @db.VarChar(24)

  externalPaymentId String?   @unique
  metadata       Json?

  items          OrderItem[]
  payments       Payment[]
  returns        Return[]
  events         OrderEvent[]

  @@index([customerId, createdAt])
}

model OrderItem {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  orderId            String
  order              Order    @relation(fields: [orderId], references: [id])

  productId          String?
  product            Product? @relation(fields: [productId], references: [id])

  sku                String   @db.VarChar(64)
  nameSnapshot       String   @db.VarChar(256)
  priceSnapshotMinor Int
  currency           String   @db.VarChar(8)
  qty                Int
  lineTotalMinor     Int      @default(0)

  @@index([orderId])
}

model Payment {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  orderId       String
  order         Order    @relation(fields: [orderId], references: [id])

  provider      String   @db.VarChar(16) // stripe|cod
  intentId      String?  @unique
  status        String   @db.VarChar(24) // requires_action|processing|succeeded|failed|canceled|pending
  amountMinor   Int
  currency      String   @db.VarChar(8)
  attempts      Int      @default(0)
  lastError     String?  @db.Text

  @@index([orderId, provider])
}

// Sprint 6: Returns, Order Events, Templates (CMS)

model Return {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])

  status     String   @db.VarChar(24) // requested|approved|rejected|in_transit|received|refunded
  reason     String?  @db.VarChar(128)
  notes      String?  @db.Text
  rmaCode    String   @unique @db.VarChar(32)

  items      ReturnItem[]

  @@index([orderId, status])
  @@index([orderId, createdAt])
}

model ReturnItem {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  returnId   String
  ret        Return   @relation(fields: [returnId], references: [id])

  orderItemId String?
  sku        String?  @db.VarChar(64)
  qty        Int      @default(1)

  @@index([returnId])
}

model OrderEvent {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())

  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])

  type       String   @db.VarChar(32) // status_changed|note|webhook
  payload    Json?

  @@index([orderId, createdAt])
}

model Template {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  key        String   @db.VarChar(64)
  locale     String   @db.VarChar(8) // ar|en
  channel    String   @db.VarChar(8) // wa|web
  body       String   @db.Text
  variables  Json?
  isActive   Boolean  @default(true)
  updatedBy  String?  @db.VarChar(64)

  @@unique([key, locale, channel])
}

// Sprint 7: Compliance audit
model ComplianceAudit {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  action      String   @db.VarChar(32) // export|delete
  subjectType String   @db.VarChar(32) // customer
  subjectId   String   @db.VarChar(64)
  requestedBy String?  @db.VarChar(64)
  status      String   @db.VarChar(24) // accepted|processing|succeeded|failed
  details     Json?

  @@index([subjectType, subjectId, createdAt])
}
